---
# this role contains tasks for all nodes

- name: Ensure /etc/apt/keyrings dir
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory

# this is only necessary when using docker CRI
- name: Add Docker GPG apt Key and configure Docker apt repo
  block:
    - name: configure Docker gpg key
      ansible.builtin.get_url:
        url: "https://download.docker.com/linux/ubuntu/gpg"
        dest: /etc/apt/keyrings/docker.asc

    - name: configure Docker repo apt source
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
  become: true

# - name: Add Docker GPG apt Key and configure Docker apt repo
#   become: true
#   shell: |
#     mkdir -p /etc/apt/keyrings
#     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
#     echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

- name: Install required system packages
  apt:
    pkg:
      - ebtables
      - apt-transport-https
      - curl
      - ethtool
      - ca-certificates
      - gnupg
      - lsb-release
    state: latest
    update_cache: true
  become: true

# this was necessary for Ubuntu 20.04 as it had old containerd package
# see: https://forum.linuxfoundation.org/discussion/862825/kubeadm-init-error-cri-v1-runtime-api-is-not-implemented
# - name: Remove old containerd
#   apt:
#     pkg: containerd
#     state: absent
#   become: true

# - name: Add Docker GPG apt Key
#   apt_key:
#     url: https://download.docker.com/linux/ubuntu/gpg
#     state: present

# - name: Add Docker Repository
#   apt_repository:
#     repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
#     # repo: deb https://download.docker.com/linux/ubuntu focal stable
#     state: present

- name: Update apt and install docker packages
  apt:
    pkg:
      # - docker-ce
      # - docker-ce-cli
      - containerd.io
    state: latest
    update_cache: true
  become: true

# - name: Update apt and install docker packages
#   apt:
#     name: "{{item}}"
#     state: latest
#     update_cache: yes
#   loop:
#     - docker-ce
#     - docker-ce-cli
#     - containerd.io

- name: add Kubernetes apt-key for APT repository
  apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v{{ k8s_repo }}/deb/Release.key
    keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    state: present
  become: true

- name: add Kubernetes APT repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_repo }}/deb/ /"
    state: present
    filename: "kubernetes"
  become: true

- name: install Kubernetes components
  apt:
    pkg:
      - kubeadm
      - kubelet
      - kubectl
    state: present
    update_cache: true
  become: true

- name: configure VM system settings for Kubernetes
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      vm.swappiness=0
      vm.overcommit_memory=1
      net.bridge.bridge-nf-call-ip6tables=1
      net.bridge.bridge-nf-call-iptables=1
      net.ipv4.ip_forward=1
      net.ipv4.tcp_keepalive_time=600
  become: true

- name: configure netfilter
  copy:
    dest: /etc/modules-load.d/netfilter.conf
    content: |
      br_netfilter
  become: true

- name: generate containerd config file
  become: true
  shell: |
    if [ -f '/etc/containerd/config.toml' ]; then
      rm /etc/containerd/config.toml
    fi
    containerd config default | sudo tee /etc/containerd/config.toml
    # enable systemd cgroup v2
    sed -i 's/SystemdCgroup = false/SystemdCgroup = true/1' /etc/containerd/config.toml

- name: Enable containerd.service
  systemd:
    name: containerd.service
    daemon_reload: true
    enabled: true
  become: true

- name: Ensure containerd.service is restarted
  service:
    name: containerd
    state: restarted
    # sleep: 2
  become: true

- name: restart sysctl, ensure br_netfilter module, disable swap, disable SELinux
  become: true
  shell: |
    modprobe br_netfilter
    sysctl --system
    lsmod | grep br_netfilter
    swapoff -a
    sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
